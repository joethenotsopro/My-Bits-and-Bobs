**********Tested (and working) on Debian Stable/LMDE 3 Cindy***********
**********YMMV on other distributions although I daresay it ***********
**********  should work on all Debian based distributions   ***********



What is this guide for? It's to make the NVidia/Bumblebee drivers retain the settings you choose for underclocking 
or overclocking whilst running a game, and then for it to return to normal discrete mode once the game has ended.

There is a small delay in between a game launching and the NVidia/Bumblebee drivers loading, enough for you to lose the
settings you need whilst playing the game (as the graphics swap back and forth settings get removed), and in my case it 
makes my system unstable as my NVidia Optimus card does not like to run at full speed, call it age or whatever I don't
know it's just very temperamental when it runs too hot hence why I needed to underclock the dedicated card.

I cannot run a game normally with 'primusrun wine "mygame.exe"' as the NVidia card likes to throw a fit and crash me
back to the desktop randomly, so after ALOT (and I mean alot) of trial and error I came up with this small guide to 
successful under/overclocking with the NVidia Optimus range of dedicated graphics cards.




This guide assumes you have the NVidia/Bumblebee drivers installed and working, all the libraries in the correct
places and both Optirun and Primusrun behave without any complaining. You may even have VirtualGL installed too! 




Do these tests to check you're all up and running:

optirun glxgears
optirun -b primus glxgears
primusrun glxgears

Also head to /etc/bumblebee/bumblebee.conf and swap between the rendering bridges too. Do all this BEFORE you 
start the rest of this guide... it will help sort out any driver and library issues before you start.

# Acceleration/ rendering bridge, possible values are auto, virtualgl and
# primus.
Bridge=virtualgl




Do not ask for any help with driver or library issues - NVidia already owe me a trip to a PTSD clinic.
This guide is 100% by own blood sweat and tears and there was plenty.





Before you go any further install nvidia-persistenced...

sudo apt-get install nvidia-persistenced

nvidia-persistenced was a real big pain in the [ForrestGump]butt-ocks[/ForrestGump] to getting running - it
turns out it needs access to directories that aren't created on it's installation AND the directories I eventually
figured out were needed are also then removed on reboot! Yay NVidia!




Any tinfoil hat wearing Linux users can stop reading now lest they break their jaws on the floor when they read 
the rest of the guide. Though I do apply a small "hack" to help out with that...




First off edit $HOME/.xsessionrc in your favorite editor and add the following. Save and reboot.

printf 'YOURPASSWORD\n' | sudo -S mkdir /var/run/nvidia-persistenced
printf 'YOURPASSWORD\n' | sudo -S chgrp users /var/run/nvidia-persistenced
printf 'YOURPASSWORD\n' | chmod g+rw /var/run/nvidia-persistenced
printf 'YOURPASSWORD\n' | sudo -S optirun -c :8 nvidia-persistenced --no-persistence-mode
shred -u -z .bash_history

It's also good practice to set permissions for others even on single user systems.

chmod go-rwx $HOME/.xsessionrc (do this for your launch scripts too)




Here are a few example scripts I use to launch games, the first is for launching the Demul Dreamcast emulator
with Wine, it's not exactly security friendly (as with .xsessionrc) but with the correct permissions set on 
the scripts I don't see much of a problem - even less so on single user systems but as I said above, set the
permissions!.

The GPUGraphicsClockOffset and GPUMemoryTransferRateOffset settings below are for underclocking my NVidia
card so it runs 24/7 without issues.

#!/bin/bash
export WINEPREFIX=/home/joethenotsopro/wine-bottles/demul
cd '/home/joethenotsopro/wine-bottles/demul/drive_c/demul'
printf 'YOURPASSWORD\n' | sudo -S optirun -c :8 nvidia-smi -pm 1
optirun nvidia-settings -c :8 -a [gpu:0]/GPUPowerMizerMode=1
optirun nvidia-settings -c :8 -a [gpu:0]/GPUGraphicsClockOffset[2]=-171
optirun nvidia-settings -c :8 -a [gpu:0]/GPUMemoryTransferRateOffset[2]=-600
vblank_mode=0 primusrun wine "c:\demul\demul.exe"
printf 'YOURPASSWORD\n' | sudo -S optirun -c :8 nvidia-smi -pm 0

Save it as $HOME/bin/yourscript.sh and then:

chmod u+x,go-rwx $HOME/bin/yourscript.sh

The script above can be tailored to use for any Wine program, including Steam.

Unfortunately the Linux version of Steam does not like my launch scripts and defies my hacking around it's innards
so if you want to over/unclock you have to either try and run the Linux games from outside Steam (War Thunder works
for instance - see below) or be stuck running Linux games via Steam normally with 'optirun bash | steam' (which for
stability I cannot do). 

Here's my War Thunder launch script, it does work with a small complaint at the beginning of the script. As you 
can see I'm running the game directly by avoiding War Thunders own game launcher. If your game has a launcher
then that games launcher will detach the scripts persistence process once it launches the main game which then
unloads NVidia/Bumblebee before reloading NVidia/Bumblebee again(!) thus resetting the settings you need for
under/overclocking...... Optimus sucks, it really does.

#!/bin/bash
printf 'YOURPASSWORD\n' | sudo -S optirun -c :8 nvidia-smi -pm 1
optirun nvidia-settings -c :8 -a [gpu:0]/GPUPowerMizerMode=1
optirun nvidia-settings -c :8 -a [gpu:0]/GPUGraphicsClockOffset[2]=-171
optirun nvidia-settings -c :8 -a [gpu:0]/GPUMemoryTransferRateOffset[2]=-600
vblank_mode=0 primusrun '/home/joenotsopro/.steam/steam/steamapps/common/War Thunder/linux64/aces'
printf 'YOURPASSWORD\n' | sudo -S optirun -c :8 nvidia-smi -pm 0




Another tip is to run the launch scripts from your favorite DE via a terminal session with:

xvt e /home/joenotsopro/bin/launchscript.sh

...or just direct from the terminal window itself. This has the added bonus of an easy way out (kill the terminal)
if something goes slightly bonkers, as it sometimes does. Do use xvt for launching scripts as it has a tiny
footprint (around 1MB in LMDE's Cinnamon DE) compared to other more fancy terminal emulators which are greedy 
pigs in terms of memory usage. Oink oink.




One other tip I can mention for laptop gaming is to install cpupower and pre-set your CPU's frequencies on boot
up. You can do this by:

sudo apt-get install linux-cpupower

then add:

printf 'YOURPASSWORD\n' | sudo -S cpupower frequency-set -f 2500Mhz

to the start of the $HOME/.xsessionrc file you edited earlier in this guide.




Good luck and have fun!
